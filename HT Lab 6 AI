{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "053d27d2-e8a1-4f39-9d2d-6fc5dd3a861d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\kk\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "372500.0"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Creating the dataset manually based on the concise dataset\n",
    "data = {\n",
    "    \"Building Size\": [0, 171, 0],  # Assuming empty values as 0 for simplicity\n",
    "    \"Price\": [435000, 320000, 310000]  # Extracted numerical values from prices\n",
    "}\n",
    "# Convert the data to a DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "# Scatter plot for visualization\n",
    "plt.xlabel('Building Size')\n",
    "plt.ylabel('Price')\n",
    "plt.scatter(df[\"Building Size\"], df[\"Price\"], color='red', marker='+')\n",
    "\n",
    "# Preparing the data for the linear regression model\n",
    "new_df = df.drop(\"Price\", axis=\"columns\")\n",
    "price = df[\"Price\"]\n",
    "# Fitting the linear regression model\n",
    "reg = LinearRegression()\n",
    "reg.fit(new_df, price)\n",
    "# Predicting the price for a building size of 3300\n",
    "reg.predict([[3300]])\n",
    "# Displaying the model coefficients and intercept\n",
    "reg.coef_\n",
    "reg.intercept_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "634b3b4d-b7d1-4646-bc9b-4c81be693f7a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
