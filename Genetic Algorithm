{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3a4e793f-9ccf-44f5-8248-6c35b7b9531d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the chromosomes matrix (each row as a space-separated string of 0s and 1s):\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter chromosome 1:  1010101000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter exactly 10 values for each chromosome.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter chromosome 1:  1 0 0 1 0 1 0 1 0 1\n",
      "Enter chromosome 2:  0 0 0 0 0 1 1 1 1 1 \n",
      "Enter chromosome 3:  1 1 1 1 1 0 0 0 0 0\n",
      "Enter chromosome 4:  1 0 1 1 1 0 0 0 1 1 \n",
      "Enter chromosome 5:  0 0 0 1 1 1 0 0 0 1 \n",
      "Enter chromosome 6:  1 0 0 1 1 0 0 1 1 0 \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Chromosomes (S):\n",
      "[1, 0, 0, 1, 0, 1, 0, 1, 0, 1]\n",
      "[0, 0, 0, 0, 0, 1, 1, 1, 1, 1]\n",
      "[1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\n",
      "[1, 0, 1, 1, 1, 0, 0, 0, 1, 1]\n",
      "[0, 0, 0, 1, 1, 1, 0, 0, 0, 1]\n",
      "[1, 0, 0, 1, 1, 0, 0, 1, 1, 0]\n",
      "Fitness Calculation:\n",
      "[5, 5, 5, 6, 4, 5]\n",
      "Total fitness: 30\n",
      "Arranging in Descending order:\n",
      "Sorted Population:\n",
      "[1, 0, 1, 1, 1, 0, 0, 0, 1, 1]\n",
      "[0, 0, 0, 0, 0, 1, 1, 1, 1, 1]\n",
      "[1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\n",
      "[1, 0, 0, 1, 0, 1, 0, 1, 0, 1]\n",
      "[1, 0, 0, 1, 1, 0, 0, 1, 1, 0]\n",
      "[0, 0, 0, 1, 1, 1, 0, 0, 0, 1]\n",
      "Crossover after 2 points:\n",
      "After Crossover (S1, S4, S5, S6):\n",
      "[1, 0, 0, 1, 1, 0, 0, 0, 1, 1]\n",
      "[0, 0, 0, 0, 0, 1, 1, 1, 1, 1]\n",
      "s5 = [0, 0, 0, 1, 1, 0, 0, 1, 1, 0] s6 = [1, 0, 0, 1, 1, 1, 0, 0, 0, 1]\n",
      "Crossover after 4th point (S2 and S3):\n",
      "After Crossover (S2 and S3):\n",
      "s2 = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]\n",
      "s3 = [1, 1, 1, 1, 0, 1, 1, 1, 1, 1]\n",
      "Mutation:\n",
      "After Mutation:\n",
      "[0, 1, 0, 1, 1, 0, 0, 0, 1, 1]\n",
      "[1, 1, 0, 0, 1, 0, 0, 0, 0, 0]\n",
      "[0, 0, 1, 1, 0, 1, 1, 1, 1, 1]\n",
      "[0, 1, 1, 1, 0, 1, 0, 1, 0, 1]\n",
      "[1, 1, 0, 1, 1, 0, 0, 1, 1, 0]\n",
      "[0, 1, 0, 1, 1, 1, 0, 0, 0, 1]\n",
      "Fitness Calculation:\n",
      "[5, 3, 7, 6, 6, 5]\n",
      "Total fitness: 32\n",
      "Fitness is greater before applying Genetic Algorithm\n"
     ]
    }
   ],
   "source": [
    "# def get_chromosomes():\n",
    "    chromosomes = []\n",
    "    print(\"Enter the chromosomes matrix (each row as a space-separated string of 0s and 1s):\")\n",
    "    for i in range(6):\n",
    "        while True:\n",
    "            try:\n",
    "                row = list(map(int, input(f\"Enter chromosome {i+1}: \").strip().split()))\n",
    "                if len(row) == 10:\n",
    "                    chromosomes.append(row)\n",
    "                    break\n",
    "                else:\n",
    "                    print(\"Please enter exactly 10 values for each chromosome.\")\n",
    "            except ValueError:\n",
    "                print(\"Invalid input. Please enter integers (0 or 1) only.\")\n",
    "    return chromosomes\n",
    "\n",
    "S = get_chromosomes()\n",
    "print(\"Initial Chromosomes (S):\")\n",
    "for row in S:\n",
    "    print(row)\n",
    "\n",
    "def calfitness(S):\n",
    "    fit = []\n",
    "    total = 0\n",
    "    print(\"Fitness Calculation:\")\n",
    "    for i in S:\n",
    "        fit.append(i.count(1))\n",
    "        total += i.count(1)\n",
    "    print(fit)\n",
    "    print(\"Total fitness:\", total)\n",
    "    return fit\n",
    "\n",
    "fit = calfitness(S)\n",
    "print(\"Arranging in Descending order:\")\n",
    "desc = S.copy()\n",
    "for i in range(len(desc)):\n",
    "    for j in range(i + 1, len(desc)):\n",
    "        if desc[i].count(1) < desc[j].count(1):\n",
    "            desc[i], desc[j] = desc[j], desc[i]\n",
    "\n",
    "print(\"Sorted Population:\")\n",
    "for row in desc:\n",
    "    print(row)\n",
    "\n",
    "print(\"Crossover after 2 points:\")\n",
    "for i in range(3):\n",
    "    desc[0][i], desc[3][i] = desc[3][i], desc[0][i]\n",
    "    desc[4][i], desc[5][i] = desc[5][i], desc[4][i]\n",
    "\n",
    "print(\"After Crossover (S1, S4, S5, S6):\")\n",
    "for row in desc[:2]:\n",
    "    print(row)\n",
    "\n",
    "print(\"s5 =\", desc[4], \"s6 =\", desc[5])\n",
    "print(\"Crossover after 4th point (S2 and S3):\")\n",
    "for i in range(4, 10):  # Swap elements starting from the 4th index (after the 4th point)\n",
    "    desc[1][i], desc[2][i] = desc[2][i], desc[1][i]\n",
    "\n",
    "print(\"After Crossover (S2 and S3):\")\n",
    "print(\"s2 =\", desc[1])\n",
    "print(\"s3 =\", desc[2])\n",
    "\n",
    "print(\"Mutation:\")\n",
    "for i in range(6):\n",
    "    for j in range(2):\n",
    "        if desc[i][j] == 0:\n",
    "            desc[i][j] = 1  # Flip 0 to 1\n",
    "        else:\n",
    "            desc[i][j] = 0  # Flip 1 to 0\n",
    "\n",
    "print(\"After Mutation:\")\n",
    "for row in desc:\n",
    "    print(row)\n",
    "\n",
    "fit2 = calfitness(desc)\n",
    "if fit < fit2:\n",
    "    print(\"Fitness is greater after applying Genetic Algorithm\")\n",
    "else:\n",
    "    print(\"Fitness is greater before applying Genetic Algorithm\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28b0b623-3a0e-4216-8919-9c61e8384bff",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
