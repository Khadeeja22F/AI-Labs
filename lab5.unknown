{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "435ac07b-7e8b-4e37-a2be-9460f736598d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted gender for the new entry before adding to dataset: male\n",
      "\n",
      "New entry added to the dataset and model retrained.\n",
      "   Gender  Height  Weight  Foot_Size\n",
      "0       1    6.00     180         12\n",
      "1       1    5.92     190         11\n",
      "2       1    5.58     170         12\n",
      "3       1    5.92     165         10\n",
      "4       0    5.00     100          6\n",
      "5       0    5.50     150          8\n",
      "6       0    5.42     130          7\n",
      "7       0    5.75     150          9\n",
      "8       1    5.50     160         10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\SED\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:439: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Step 1: Define the data based on the table\n",
    "data = {\n",
    "    'Gender': ['male', 'male', 'male', 'male', 'female', 'female', 'female', 'female'],\n",
    "    'Height': [6.00, 5.92, 5.58, 5.92, 5.00, 5.50, 5.42, 5.75],\n",
    "    'Weight': [180, 190, 170, 165, 100, 150, 130, 150],\n",
    "    'Foot_Size': [12, 11, 12, 10, 6, 8, 7, 9]\n",
    "}\n",
    "# Create DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "# Step 2: Encode the 'Gender' column using LabelEncoder\n",
    "label_encoder = LabelEncoder()\n",
    "df['Gender'] = label_encoder.fit_transform(df['Gender'])  # Male: 1, Female: 0\n",
    "# Step 3: Separate features (X) and target variable (y)\n",
    "X = df[['Height', 'Weight', 'Foot_Size']]  # Features: Height, Weight, Foot_Size\n",
    "y = df['Gender']  # Target: Gender\n",
    "# Step 4: Train the Decision Tree Classifier\n",
    "clf = DecisionTreeClassifier()\n",
    "clf.fit(X, y)\n",
    "# Step 5: Define a new entry to predict (example input)\n",
    "new_entry = {'Height': 5.5, 'Weight': 160, 'Foot_Size': 10}\n",
    "# Step 6: Predict the gender of the new entry\n",
    "predicted_gender = clf.predict([[new_entry['Height'], new_entry['Weight'], new_entry['Foot_Size']]])[0]\n",
    "predicted_gender_label = label_encoder.inverse_transform([predicted_gender])[0]\n",
    "# Print the predicted gender\n",
    "print(f\"Predicted gender for the new entry before adding to dataset: {predicted_gender_label}\")\n",
    "# Step 7: Add the new entry with the predicted label to the dataset\n",
    "# Convert the new_entry dictionary into a DataFrame and ensure 'Gender' column is added as numeric\n",
    "new_entry_df = pd.DataFrame([new_entry])  # Create DataFrame from the dictionary\n",
    "new_entry_df['Gender'] = predicted_gender  # Add predicted gender as a numeric value\n",
    "# Concatenate the new entry to the existing DataFrame\n",
    "df = pd.concat([df, new_entry_df], ignore_index=True)  # Fixed the missing parenthesis\n",
    "# Step 8: Retrain the classifier with the updated dataset\n",
    "X = df[['Height', 'Weight', 'Foot_Size']]\n",
    "y = df['Gender']\n",
    "clf.fit(X, y)\n",
    "# Display the updated dataset and inform the user of successful retraining\n",
    "print(\"\\nNew entry added to the dataset and model retrained.\")\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd9376c1-c24c-4703-93c2-76684e78fea8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted gender for the new entry: male\n",
      "\n",
      "New entry added to the dataset and model retrained.\n",
      "   Gender  Height  Weight  Foot_Size\n",
      "0       1    6.00     180         12\n",
      "1       1    5.92     190         11\n",
      "2       1    5.58     170         12\n",
      "3       1    5.92     165         10\n",
      "4       0    5.00     100          6\n",
      "5       0    5.50     150          8\n",
      "6       0    5.42     130          7\n",
      "7       0    5.75     150          9\n",
      "8       1    5.50     160         10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\SED\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:439: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "# Step 1: Define the data based on the table\n",
    "data = {\n",
    "    'Gender': ['male', 'male', 'male', 'male', 'female', 'female', 'female', 'female'],\n",
    "    'Height': [6.00, 5.92, 5.58, 5.92, 5.00, 5.50, 5.42, 5.75],\n",
    "    'Weight': [180, 190, 170, 165, 100, 150, 130, 150],\n",
    "    'Foot_Size': [12, 11, 12, 10, 6, 8, 7, 9]\n",
    "}\n",
    "# Create DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "# Step 2: Encode the 'Gender' column using LabelEncoder\n",
    "label_encoder = LabelEncoder()\n",
    "df['Gender'] = label_encoder.fit_transform(df['Gender'])  # Male: 1, Female: 0\n",
    "# Step 3: Separate features (X) and target variable (y)\n",
    "X = df[['Height', 'Weight', 'Foot_Size']]  # Features: Height, Weight, Foot_Size\n",
    "y = df['Gender']  # Target: Gender\n",
    "# Step 4: Train the Decision Tree Classifier\n",
    "clf = DecisionTreeClassifier()\n",
    "clf.fit(X, y)\n",
    "# Step 5: Define a new entry to predict (example input)\n",
    "new_entry = {'Height': 5.5, 'Weight': 160, 'Foot_Size': 10}\n",
    "# Step 6: Predict the gender of the new entry\n",
    "predicted_gender = clf.predict([[new_entry['Height'], new_entry['Weight'], new_entry['Foot_Size']]])[0]\n",
    "predicted_gender_label = label_encoder.inverse_transform([predicted_gender])[0]\n",
    "# Print the predicted gender for the new entry\n",
    "print(f\"Predicted gender for the new entry: {predicted_gender_label}\")\n",
    "# Step 7: Add the new entry with the predicted label to the dataset\n",
    "# Convert the new_entry dictionary into a DataFrame\n",
    "new_entry_df = pd.DataFrame([new_entry])  # Create DataFrame from the dictionary\n",
    "new_entry_df['Gender'] = predicted_gender  # Add predicted gender as a numeric value\n",
    "# Concatenate the new entry to the existing DataFrame\n",
    "df = pd.concat([df, new_entry_df], ignore_index=True)\n",
    "# Step 8: Retrain the classifier with the updated dataset\n",
    "X = df[['Height', 'Weight', 'Foot_Size']]  # Update features with the new data\n",
    "y = df['Gender']  # Update target with the new data\n",
    "clf.fit(X, y)\n",
    "# Step 9: Display the updated dataset and inform the user of successful retraining\n",
    "print(\"\\nNew entry added to the dataset and model retrained.\")\n",
    "print(df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "227f9a8c-979d-4145-aa21-faad738182c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted gender for the new entry: male\n",
      "\n",
      "Updated dataset after adding the new entry:\n",
      "[[  1.     6.   180.    12.  ]\n",
      " [  1.     5.92 190.    11.  ]\n",
      " [  1.     5.58 170.    12.  ]\n",
      " [  1.     5.92 165.    10.  ]\n",
      " [  0.     5.   100.     6.  ]\n",
      " [  0.     5.5  150.     8.  ]\n",
      " [  0.     5.42 130.     7.  ]\n",
      " [  0.     5.75 150.     9.  ]\n",
      " [  1.     5.5  160.    10.  ]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Step 1: Define the data using numpy arrays\n",
    "# Data: ['Gender', 'Height', 'Weight', 'Foot_Size']\n",
    "data = np.array([\n",
    "    [1, 6.00, 180, 12],  # male\n",
    "    [1, 5.92, 190, 11],  # male\n",
    "    [1, 5.58, 170, 12],  # male\n",
    "    [1, 5.92, 165, 10],  # male\n",
    "    [0, 5.00, 100, 6],   # female\n",
    "    [0, 5.50, 150, 8],   # female\n",
    "    [0, 5.42, 130, 7],   # female\n",
    "    [0, 5.75, 150, 9]    # female\n",
    "])\n",
    "# Step 2: Separate features (X) and target variable (y)\n",
    "X = data[:, 1:]  # Features: Height, Weight, Foot_Size\n",
    "y = data[:, 0]   # Target: Gender (1 for male, 0 for female)\n",
    "# Step 3: Train the Decision Tree Classifier\n",
    "clf = DecisionTreeClassifier()\n",
    "clf.fit(X, y)\n",
    "# Step 4: Define a new entry to predict (example input)\n",
    "new_entry = np.array([[5.5, 160, 10]])\n",
    "# Step 5: Predict the gender of the new entry\n",
    "predicted_gender = clf.predict(new_entry)[0]\n",
    "predicted_gender_label = 'male' if predicted_gender == 1 else 'female'\n",
    "# Print the predicted gender for the new entry\n",
    "print(f\"Predicted gender for the new entry: {predicted_gender_label}\")\n",
    "# Step 6: Add the new entry with the predicted label to the dataset\n",
    "# Create a new entry with the predicted gender and append it to the original data\n",
    "new_entry_with_gender = np.hstack([np.array([[predicted_gender]]), new_entry])  # Add predicted gender to the new entry\n",
    "updated_data = np.vstack([data, new_entry_with_gender])  # Append the new entry to the dataset\n",
    "# Step 7: Retrain the classifier with the updated dataset\n",
    "X_updated = updated_data[:, 1:]  # Updated features\n",
    "y_updated = updated_data[:, 0]   # Updated target\n",
    "clf.fit(X_updated, y_updated)\n",
    "# Step 8: Display the updated dataset and retrained model\n",
    "print(\"\\nUpdated dataset after adding the new entry:\")\n",
    "print(updated_data)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d24b5fd8-7507-4de3-946d-59a46584c4a8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
