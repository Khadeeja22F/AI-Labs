{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bc9a2106-2533-46b4-a06c-24e07873e7ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Board:\n",
      "X | O | X\n",
      "-----\n",
      "O | O | X\n",
      "-----\n",
      "  |   |  \n",
      "-----\n",
      "The Optimal Move is at: Row 2 Column 2\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def print_board(board):\n",
    "    for row in board:\n",
    "        print(\" | \".join(row))\n",
    "        print(\"-\" * 5)\n",
    "\n",
    "def is_moves_left(board):\n",
    "    for row in board:\n",
    "        if \" \" in row:\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "def evaluate(board):\n",
    "    # Check rows for a winner\n",
    "    for row in board:\n",
    "        if row[0] == row[1] == row[2] and row[0] != \" \":\n",
    "            return 10 if row[0] == 'X' else -10\n",
    "\n",
    "    # Check columns for a winner\n",
    "    for col in range(3):\n",
    "        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != \" \":\n",
    "            return 10 if board[0][col] == 'X' else -10\n",
    "\n",
    "    # Check diagonals for a winner\n",
    "    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != \" \":\n",
    "        return 10 if board[0][0] == 'X' else -10\n",
    "\n",
    "    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != \" \":\n",
    "        return 10 if board[0][2] == 'X' else -10\n",
    "\n",
    "    return 0\n",
    "\n",
    "def minimax(board, depth, is_max):\n",
    "    score = evaluate(board)\n",
    "\n",
    "    # If Maximizer or Minimizer has won\n",
    "    if score == 10 or score == -10:\n",
    "        return score\n",
    "\n",
    "    # If no more moves, it's a draw\n",
    "    if not is_moves_left(board):\n",
    "        return 0\n",
    "\n",
    "    if is_max:\n",
    "        best = -math.inf\n",
    "        for i in range(3):\n",
    "            for j in range(3):\n",
    "                if board[i][j] == \" \":\n",
    "                    board[i][j] = 'X'\n",
    "                    best = max(best, minimax(board, depth + 1, False))\n",
    "                    board[i][j] = \" \"\n",
    "        return best\n",
    "    else:\n",
    "        best = math.inf\n",
    "        for i in range(3):\n",
    "            for j in range(3):\n",
    "                if board[i][j] == \" \":\n",
    "                    board[i][j] = 'O'\n",
    "                    best = min(best, minimax(board, depth + 1, True))\n",
    "                    board[i][j] = \" \"\n",
    "        return best\n",
    "\n",
    "def find_best_move(board):\n",
    "    best_val = -math.inf\n",
    "    best_move = (-1, -1)\n",
    "\n",
    "    for i in range(3):\n",
    "        for j in range(3):\n",
    "            if board[i][j] == \" \":\n",
    "                board[i][j] = 'X'\n",
    "                move_val = minimax(board, 0, False)\n",
    "                board[i][j] = \" \"\n",
    "                if move_val > best_val:\n",
    "                    best_val = move_val\n",
    "                    best_move = (i, j)\n",
    "\n",
    "    return best_move\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    board = [\n",
    "        [\"X\", \"O\", \"X\"],\n",
    "        [\"O\", \"O\", \"X\"],\n",
    "        [\" \", \" \", \" \"]\n",
    "    ]\n",
    "\n",
    "    print(\"Initial Board:\")\n",
    "    print_board(board)\n",
    "\n",
    "    best_move = find_best_move(board)\n",
    "    print(f\"The Optimal Move is at: Row {best_move[0]} Column {best_move[1]}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a742756-9d19-4605-8c90-f65b1c2c7af0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
